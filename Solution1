/**
 * @param {number[]} jobs
 * @param {number} k
 * @return {number}
 */
var minimumTimeRequired = function(jobs, k) {
    
//sort jobs decreasingly
   const jobsSorted = jobs.sort((a,b)=>a-b);
        
/**distribute function (sinusoide)
* The idea is to distribute the k smallest jobs to each worker, then the k biggest jobs.
* And repeat untill we run out of jobs.
* range is the total number of jobs
* subRange is the number of workers
*/
    function distribute(range, subRange, arrPushing){
        const arrToFill = [];
        var rangeIn = range;
        
        while(rangeIn >0){
            for (i=0; i<subRange; i++){
                if(rangeIn<=0){
                    break;
                }
                arrToFill.push(arrPushing[i]);
                rangeIn--;        
            }
            for (i=0; i<subRange; i++){
                if(rangeIn<=0){
                    break;
                }                
                arrToFill.push(arrPushing[arrPushing.length-i-1]);
                rangeIn--;        
            }         
        }        
        return arrToFill;
    }    
   
//find & return the biggest
    return Math.max(...distribute(jobsSorted.length, k, jobsSorted));
}
